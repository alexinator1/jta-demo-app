<?php

namespace tests\codeception\unit;


use Codeception\Test\Unit;
use tests\codeception\unit\fixtures\UserGroupFixture;
use app\models\Group;
use yii\test\FixtureTrait;

class JtaTest extends Unit
{
    use FixtureTrait;
    protected function setUp()
    {
        parent::setUp();
        $this->loadFixtures();
        // uncomment the following to load fixtures for user table
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->unloadFixtures();
    }

    public function fixtures()
    {
        return [
            'user_group' => UserGroupFixture::className()
        ];
    }


    public $expetedArray = [
        21 => ['Head 21-11', 'Member 21-12','Member 21-13'],
        22 => ['Member 22-11', 'Head 22-12', 'Member 22-13', 'Member 22-14'],
        23 => ['Member 23-11', 'Member 23-12', 'Head 23-13']
    ];


    public function testLazyLoad()
    {
        $this->specify("Testing lazy load for group", function(){
            $roles = [];
            $group = Group::findOne(21);
            foreach($group->users as $user)
            {
                $roles[] = $user->role[$group->id];
            }

            $this->assertEquals($this->expetedArray[21], $roles);
        });

        $this->specify("Testing lazy load for groups", function(){
            $roles = [];
            $groups = Group::find()->all();

            foreach($groups as $group){
                foreach($group->users as $user)
                {
                    $roles[$group->id][] = $user->role[$group->id];
                }
            }

            $this->assertEquals($this->expetedArray, $roles);
        });
    }

    public function testEagerLoadWith()
    {
//        $this->specify("Testing lazy load for groups", function(){
//
//            $roles = [];
//            $group = Group::find()->where(['id'=>21])->with('users')->one();
//            foreach($group->users as $user)
//            {
//                $roles[] = $user->role[$group->id];
//            }
//
//            $this->assertEquals($this->expetedArray[21], $roles);
//        });

//        $roles = [];
//        $groups =  Group::find()->with('users')->all();
//
//        foreach($groups as $group){
//            foreach($group->users as $user)
//            {
//                $roles[$group->id][] = $user->role[$group->id];
//            }
//        }
//        $this->assertEquals($this->expetedArray, $roles);
//
//
//        $roles = [];
//        $groups = Group::find()->asArray()->with('users')->all();
//        foreach($groups as $group){
//            foreach($group['users'] as $user)
//            {
//                $roles[$group['id']][] = $user->role[$group['id']];
//            }
//        }
//
//        $this->assertEquals($this->expetedArray, $roles);

    }
}